{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","id","name","email","className","src","alt","CardList","robots","cardComponent","map","user","i","key","ErrorBoundary","state","hasError","error","info","this","children","Component","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","length","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","err","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"wQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCASC,EAhBF,SAACC,GAAW,IACbC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OAGQ,yBAAKC,UAAU,0CACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,aACpD,yBAAKF,UAAU,QACX,4BAAMF,GACN,2BAAKC,MCQVI,EAhBE,SAACP,GAAW,IACjBQ,EAAWR,EAAXQ,OACFC,EAAgBD,EAAOE,KACzB,SAACC,EAAKC,GACF,OAAO,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGX,GAAIA,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAKjG,OACI,6BACMM,ICQCK,E,kDAnBX,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDe,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKJ,MAAM,CAAEC,UAAU,M,+BAIvB,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKnB,MAAMoB,a,GAhBEC,aCWbC,EAXG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,2BACInB,UAAU,mCACVoB,KAAK,SACLC,YAAY,gBACZC,SAAUH,KCEPI,EARA,SAAC3B,GACZ,OACI,yBAAK4B,MAAO,CAAEC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/D/B,EAAMoB,WCqBdY,G,wLASEb,KAAKnB,MAAMiC,oB,+BAmBL,IAAD,EACsDd,KAAKnB,MAAxDkC,EADH,EACGA,YAAaC,EADhB,EACgBA,eAAgB3B,EADhC,EACgCA,OAAQ4B,EADxC,EACwCA,UACvCC,EAAiB7B,EAAO8B,QAAO,SAACC,GAClC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASP,EAAYM,kBAEzD,OAAqB,IAAlBhC,EAAOkC,QAGCN,EAFA,uCAKH,yBAAKhC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWmB,aAAcY,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQ6B,W,GA5C5BhB,cAsDHsB,eAtES,SAAC5B,GACrB,MAAO,CACHmB,YAAanB,EAAM6B,aAAaV,YAChC1B,OAAQO,EAAM8B,cAAcrC,OAC5B4B,UAAWrB,EAAM8B,cAAcT,UAC/BnB,MAAOF,EAAM8B,cAAc5B,UAIR,SAAC6B,GACxB,MAAO,CACHX,eAAgB,SAACY,GAAD,OAAWD,ECdM,CACrCtB,KCR+B,sBDS/BwB,QDYuDD,EAAME,OAAOC,SAChEjB,gBAAiB,kBAAMa,GCVI,SAACA,GAChCA,EAAS,CAAEtB,KCXuB,2BDYlC2B,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACFT,EAAS,CAAEtB,KChBe,yBDgBewB,QAASO,OAErDC,OAAM,SAAAvC,GAAK,OAAI6B,EAAS,CAAEtB,KCjBE,wBDiB2BwB,QAAS/B,cD2D1D0B,CAA6CX,GGvEtDyB,EAAqB,CACvBvB,YAAa,IAaXwB,EAAqB,CACvBtB,WAAW,EACX5B,OAAQ,GACRS,MAAO,ICVL0C,EAASC,yBAETC,EAAcC,YAAgB,CAAElB,aDJV,WAA0C,IAAzC7B,EAAwC,uDAAlC0C,EAAoBM,EAAc,uDAAP,GAC1D,OAAOA,EAAOvC,MACV,IDhB2B,sBCiBvB,OAAOwC,OAAOC,OAAO,GAAIlD,EAAO,CAACmB,YAAa6B,EAAOf,UACzD,QACI,OAAOjC,ICDiC8B,cDWvB,WAA0C,IAAzC9B,EAAwC,uDAAlC2C,EAAoBK,EAAc,uDAAP,GAC3D,OAAOA,EAAOvC,MACV,ID7B8B,yBC8B1B,OAAOwC,OAAOC,OAAO,GAAIlD,EAAO,CAAEqB,WAAW,IACjD,ID9B8B,yBC+B1B,OAAO4B,OAAOC,OAAO,GAAIlD,EAAO,CAAEP,OAAQuD,EAAOf,QAASZ,WAAW,IACzE,ID/B6B,wBCgCzB,OAAO4B,OAAOC,OAAO,GAAIlD,EAAO,CAAEmD,IAAKH,EAAOf,QAASZ,WAAW,IACtE,QACI,OAAOrB,MCnBboD,EAAQC,YAAYP,EAAaQ,YAAgBC,IAAiBX,IAExEY,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SV0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAvC,GACL+D,QAAQ/D,MAAMA,EAAMgE,c","file":"static/js/main.f175f52e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react';\n\nconst Card = (props) => {\n    const { id, name, email } = props;// destructing\n    return (\n        //<Fragment>\n            //<h1>Hello Robots</h1>\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\n                <img src={`https://robohash.org/${id}?200*200`} alt=\"an robot\"/>\n                <div className='card'>\n                    <h2>{ name }</h2>\n                    <p>{ email }</p>\n                </div>\n            </div>\n        //</Fragment>        \n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = (props) => {\n    const { robots } = props;\n    const cardComponent = robots.map(\n        (user,i) => {\n            return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>;\n            // React requires that each child in a list should have a unique \"key\" prop.\n            //return <Card id={user.id} name={user.name} email={user.email}/>; // also works\n        }\n    ); \n    return (\n        <div>\n            { cardComponent }\n        </div>        \n    );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.state({ hasError: true });\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Oooops. That is not good!</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <input \n            className='pa3 ba b--green bg-lightest-blue' \n            type=\"search\" \n            placeholder='search robots'\n            onChange={searchChange}\n        />\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY:'scroll', border: '1px solid black', height: '700px' }}>\n            { props.children }\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\n//import { robots } from './robots';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    // constructor() {\n    //     super();\n    //     this.state = {\n    //         robots: []\n    //     };\n    // }\n\n    componentDidMount() {       \n        this.props.onRequestRobots();\n        // console.log(this.props); \n        // fetch('https://jsonplaceholder.typicode.com/users')\n        //     .then(response => {\n        //        return response.json();\n        //     })\n        //     .then(users => {\n        //         this.setState({ robots: users});\n        //     })        \n    }\n\n    //onSeachChange = (event) => {\n    //    this.setState({searchfield: event.target.value});        \n        //const filteredRobots = this.state.robots.filter((robot) => {\n            //return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        //})// 如果onSeachChange不写成箭头函数，this指向的是searchBox 里的input\n        //console.log(filteredRobots);\n    //}\n\n    render() {        \n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter((robot) => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        if(robots.length === 0){\n            return <h1>Loading</h1>\n        }else{\n            return isPending ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/> \n                        </ErrorBoundary>\n                        {/* CardList is the children of Scroll, children, state, and props are three ideas in React */}                        \n                    </Scroll>                    \n                </div>        \n            );\n        }        \n    }    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // connect is called higher order function which can return another fucntio when gets called","import { \n    CHANGE_SEARCH_FILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FILED,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {\n            return response.json();\n        })\n        .then(data => {\n            dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data});\n        })\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))  \n}","export const CHANGE_SEARCH_FILED = 'CHANGE_SEARCH_FILED';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCH_FILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\n\n// initial state\nconst initialStateSearch = {\n    searchField: ''\n}\n\n// create a reducer\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FILED: \n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;    \n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { err: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\n\n//import Card from './Card';//因为Card是通过export default输出的，也就是输出一个\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import { robots } from './robots';// 因为robots不是用export default输出的，也就有可能除了输出robots之外还有比如cats，所以需要destructure it\nimport App from './containers/App'\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>    \n    <App />     \n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}